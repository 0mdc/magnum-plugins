{
  "asset": {
    "version": "2.0"
  },
  "nodes": [
    {
      "note": "not part of any scene, but still has the names registered",
      "extras": {
        "registeredButNotInAnyScene": 3
      }
    },
    {
      "name": "no extras property"
    },
    {
      "name": "extras not an object",
      "extras": []
    },
    {
      "name": "ignored types",
      "note": "none of these will have their names registered",
      "extras": {
        "invalidNullField": null,
        "invalidHeterogeneousArrayField": [3, 17, "hey", 26],
        "invalidObjectField": {}
      }
    },
    {
      "name": "empty extras",
      "extras": {}
    },
    {
      "note": "duplicate keys are turned into multiple occurences of the same field because that's the zero-effort way to handle those",
      "extras": {
        "radius": 5.25,
        "offset": 17,
        "UppercaseName": -56,
        "offset": -22,
        "visible": true,
        "category": "duplicated",
        "alias": "different string field data should't get mixed together",
        "category": "very",
        "radius": 3.5
      }
    },
    {
      "name": "array values",
      "note": "arrays are then treated as multiple values of the same name so having the same key once as an array and once as a number is fine",
      "extras": {
          "radius": [15.3, 56.2, -17.22, 0.5],
          "offset": [226, -1767],
          "category": ["hello", "world"],
          "visible": [true, false, false, true]
      }
    },
    {
      "name": "invalid values",
      "note": "the offset and flags fail only because they're set to be parsed as Int and UnsignedInt, respectively; category is then supposed to be a string, visible a bool and offset a number",
      "extras": {
        "radius": 56.0f,
        "offset": 23.5,
        "category": 155,
        "flags": -1,
        "visible": 0,
        "offset": "none"
      }
    },
    {
      "name": "invalid array values",
      "note": "similarly to above, the offset and flags fail only because they're set to be parsed as Int and UnsignedInt; category then a string and visible a bool -- in particular, it doesn't matter that they are arrays",
      "extras": {
        "radius": ["this", "isn't", "a float"],
        "category": ["not", false, "homogeneous", null, "type"],
        "offset": [3.14],
        "flags": [-15, 33],
        "visible": [[], [], []]
      }
    },
    {
      "name": "empty array values",
      "note": "since an empty array would add precisely 0 fields to the scene even if we knew its concrete type, it doesn't make sense to warn about it",
      "extras": {
        "emptyArray": [],
        "radius": []
      }
    },
    {
      "note": "to verify the 32-bit precision doesn't get lost along the way",
      "extras": {
        "visible": false,
        "offset": -2147483648,
        "offset": [2147483647, -2147483648]
      }
    },
    {
      "extras": {
        "radius": 0.5,
        "visible": true,
        "alias": "seriously, not mixed",
        "category": "noteless"
      }
    },
    {
      "note": "to verify the 32-bit precision doesn't get lost along the way",
      "extras": {
        "radius": 5.5,
        "visible": false,
        "category": "positive",
        "flags": 4294967295,
        "flags": [0, 4294967295]
      }
    }
  ],
  "scenes": [
    {
      "nodes": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
    },
    {
      "note": "fields get specified in order of node discovery",
      "nodes": [12, 11]
    }
  ]
}
